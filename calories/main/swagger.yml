openapi: 3.0.0
info:
  description: This is the OpenAPI file to define the Calories REST API
  version: 1.0.0
  title: Calories REST API
paths:
  /users:
    get:
      operationId: calories.main.controller.users.read_users
      tags:
        - Users
      summary: Read the entire set of users, sorted by user name
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/PageNumber'
      description: Read the entire set of users, sorted by user name
      responses:
        200:
          $ref: '#/components/responses/SuccessUsers'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    post:
      operationId: calories.main.controller.users.create_user
      tags:
        - Users
      summary: Create a user
      description: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/User'
        description: User to create
        required: true
      responses:
        201:
          $ref: '#/components/responses/SuccessUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
      security:
        - jwt: []

  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/UserName'

    get:
      operationId: calories.main.controller.users.read_user
      tags:
        - Users
      summary: Read one user
      responses:
        200:
          $ref: '#/components/responses/SuccessUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    put:
      operationId: calories.main.controller.users.update_user
      tags:
        - Users
      summary: Update an user
      description: Update an user
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/SuccessUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    delete:
      operationId: calories.main.controller.users.delete_user
      tags:
        - Users
      summary: Delete an user
      responses:
        200:
          $ref: '#/components/responses/SuccessString'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

  /users/{username}/meals:
    parameters:
      - $ref: '#/components/parameters/UserName'

    get:
      operationId: calories.main.controller.meals.read_meals
      tags:
        - Meals
      summary: Read all the meals associated with an user
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/PageNumber'
      responses:
        200:
          $ref: '#/components/responses/SuccessMeals'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    post:
      operationId: calories.main.controller.meals.create_meal
      tags:
        - Meals
      summary: Create a meal associated with a user
      description: Create a meal associated with a user
      requestBody:
        $ref: '#/components/requestBodies/Meal'
        description: Meal to update
        required: true
      responses:
        201:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
      security:
        - jwt: []

  /users/{username}/meals/{id}:
    parameters:
      - $ref: '#/components/parameters/UserName'
      - $ref: '#/components/parameters/MealId'

    get:
      operationId: calories.main.controller.meals.read_meal
      tags:
        - Meals
      summary: Read a particular meal associated with a user
      responses:
        200:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    put:
      operationId: calories.main.controller.meals.update_meal
      tags:
        - Meals
      summary: Update a meal associated with a user
      description: Update a meal associated with a person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    delete:
      operationId: calories.main.controller.meals.delete_meal
      tags:
        - Meals
      summary: Delete an entry associated with an user
      responses:
        200:
          $ref: '#/components/responses/SuccessString'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

  /login:
    post:
      summary: Return JWT token
      operationId: calories.main.controller.auth.login
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/Login'
        required: true
      responses:
        201:
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                data:
                  Authorization:
                    type: string
                required:
                  - Authorization
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: Username
          minLength: 4
        name:
          type: string
          description: Name of the user
          minLength: 1
        email:
          type: string
          format: email
          description: Email of the user
        role:
          type: string
          enum: [USER, MANAGER, ADMIN]
          description: Role of the user
        daily_calories:
          type: integer
          description: Calories of the day for the user
        password:
          type: string
          format: password
          minLength: 6
          description: Password of the user

    Meal:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Id of the meal
        date:
          type: string
          format: date
          description: Date of the meal
        time:
          type: string
          format: time
          description: Time of the meal
        name:
          type: string
          description: Name of the meal
          minLength: 1
        grams:
          type: integer
          minimum: 0
          description: Name of the meal
        description:
          type: string
          description: Description of the meal
          minLength: 1
        calories:
          type: integer
          minimum: 0
          description: Calories of the meal
        under_daily_total:
          type: boolean
          readOnly: true
          description: Calories of the meal

    Error:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        title:
          type: string
        type:
          type: string
      required:
        - detail
        - status
        - title
        - type

    Response:
      type: object
      properties:
        status:
          type: integer
          description: Status code of the request
        title:
          type: string
          description: Name of the status code
        detail:
          type: string
          description: Description of the request result
      required:
        - detail
        - status
        - title

    PaginatedResponse:
      $ref: '#/components/schemas/Response'
      numPages:
        type: integer
        description: Total number of pages
      totalResults:
        type: integer
        description: Total results of the request

  parameters:
    UserName:
      name: username
      in: path
      description: Username of the user to perform the action
      required: true
      schema:
        type: string
      example: username1

    MealId:
      name: id
      in: path
      description: Id of meal
      required: true
      schema:
        type: integer
        minimum: 0
      example: 1

    Filter:
      name: filter
      in: query
      description: Filtering for results
      schema:
        type: string

    ItemsPerPage:
      name: itemsPerPage
      schema:
        type: integer
        minimum: 1
        default: 10
      in: query
      description: Items per page

    PageNumber:
      name: pageNumber
      schema:
        type: integer
        minimum: 1
        default: 1
      in: query
      description: Page number


  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
            required:
              - username
              - name
              - email
              - role
              - daily_calories
              - password

    Meal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meal'
            required:
              - date
              - time
              - name
              - grams
              - description
              - calories

    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username
              password:
                type: string
                format: password
                description: Password
            required:
              - username
              - password

  responses:
    BadRequest:
      description: The request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: The user is not authenticated to perform the action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: The user does not have the right permissions to perform the action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The specified request was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: The specified object already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    SuccessUsers:
      description: Successfully read users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedResponse'
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'

    SuccessUser:
      description: Action performed on user successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              $ref: '#/components/schemas/User'

    SuccessString:
      description: The action has been succesfully performed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              type: string

    SuccessMeals:
      description: Successfully read meals for user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedResponse'
            data:
              type: array
              items:
                $ref: '#/components/schemas/Meal'

    SuccessMeal:
      description: Successfully updated meal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              $ref: '#/components/schemas/Meal'

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: calories.main.controller.auth.decode_token