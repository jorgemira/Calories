openapi: 3.0.0
info:
  description: This is the OpenAPI file to define the Calories REST API
  version: 1.0.0
  title: Calories REST API
paths:
  /users:
    get:
      operationId: calories.main.controller.users.read_users
      tags:
        - Users
      summary: Read the entire set of users, sorted by user name
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/PageNumber'
      description: Read the entire set of users, sorted by user name
      responses:
        200:
          $ref: '#/components/responses/SuccessUsers'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
      security:
        - jwt: []

    post:
      operationId: calories.main.controller.users.create_user
      tags:
        - Users
      summary: Create an user
      description: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/UserAllReq'
        description: User to create
        required: true
      responses:
        201:
          $ref: '#/components/responses/SuccessUser'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
      security:
        - jwt: []

  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/UserName'

    get:
      operationId: calories.main.controller.users.read_user
      tags:
        - Users
      summary: Read an user
      responses:
        200:
          $ref: '#/components/responses/SuccessUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    put:
      operationId: calories.main.controller.users.update_user
      tags:
        - Users
      summary: Update an user
      description: Update an user
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/SuccessUser'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    delete:
      operationId: calories.main.controller.users.delete_user
      tags:
        - Users
      summary: Delete an user
      responses:
        200:
          $ref: '#/components/responses/SuccessString'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

  /users/{username}/meals:
    parameters:
      - $ref: '#/components/parameters/UserName'

    get:
      operationId: calories.main.controller.meals.read_meals
      tags:
        - Meals
      summary: Read all the meals associated with an user
      parameters:
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/ItemsPerPage'
        - $ref: '#/components/parameters/PageNumber'
      responses:
        200:
          $ref: '#/components/responses/SuccessMeals'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    post:
      operationId: calories.main.controller.meals.create_meal
      tags:
        - Meals
      summary: Create a meal associated with an user
      description: Create a meal associated with an user
      requestBody:
        $ref: '#/components/requestBodies/MealReq'
        description: Meal to update
        required: true
      responses:
        201:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
      security:
        - jwt: []

  /users/{username}/meals/{id}:
    parameters:
      - $ref: '#/components/parameters/UserName'
      - $ref: '#/components/parameters/MealId'

    get:
      operationId: calories.main.controller.meals.read_meal
      tags:
        - Meals
      summary: Read a meal associated with an user
      responses:
        200:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    put:
      operationId: calories.main.controller.meals.update_meal
      tags:
        - Meals
      summary: Update a meal associated with an user
      description: Update a meal associated with a person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/SuccessMeal'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

    delete:
      operationId: calories.main.controller.meals.delete_meal
      tags:
        - Meals
      summary: Delete a meal associated with an user
      responses:
        200:
          $ref: '#/components/responses/SuccessString'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      security:
        - jwt: []

  /login:
    post:
      summary: Return JWT token
      operationId: calories.main.controller.auth.login
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/Login'
        required: true
      responses:
        201:
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
                data:
                  Authorization:
                    type: string
                required:
                  - Authorization
              example:
                Authorization: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODI1MzU2NzQsImV4cCI6MTU4MjUzNzQ3NCwic3ViIjoiYWRtaW4ifQ.19U9SnWgDIUbh7dXuxbOwD-xNjpryLKn9id4_yCs2_Y"
                detail: "User 'admin' successfully logged in"
                status: 201
                title: Success
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: Username
          minLength: 4
        name:
          type: string
          description: Name of the user
          minLength: 1
        email:
          type: string
          format: email
          description: Email of the user
        role:
          type: string
          enum: [USER, MANAGER, ADMIN]
          description: Role of the user
        daily_calories:
          type: integer
          description: Calories of the day for the user
          minimum: 0
        password:
          type: string
          format: password
          minLength: 6
          description: Password of the user
      example:
        username: JohnDoe
        name: "John Doe"
        email: john.doe@users.com
        role: USER
        daily_calories: 2500
        password: password_john

    Meal:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Id of the meal
        date:
          type: string
          format: date
          description: Date of the meal
        time:
          type: string
          format: time
          description: Time of the meal
        name:
          type: string
          description: Name of the meal
          minLength: 1
        grams:
          type: integer
          minimum: 0
          description: Name of the meal
        description:
          type: string
          description: Description of the meal
          minLength: 1
        calories:
          type: integer
          minimum: 0
          description: Calories of the meal
        under_daily_total:
          type: boolean
          readOnly: true
          description: Calories of the meal
      required:
        - name
        - date
      example:
        date: 2020-02-20
        time: "13:45:00"
        name: Pizza
        grams: 300
        description: Medium sized anchovies pizza
        calories: 900

    Error:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        title:
          type: string
        type:
          type: string
      required:
        - detail
        - status
        - title
        - type

    Response:
      type: object
      properties:
        status:
          type: integer
          description: Status code of the request
        title:
          type: string
          description: Name of the status code
        detail:
          type: string
          description: Description of the request result
      required:
        - detail
        - status
        - title

    PaginatedResponse:
      $ref: '#/components/schemas/Response'
      numPages:
        type: integer
        description: Total number of pages
      totalResults:
        type: integer
        description: Total results of the request

  parameters:
    UserName:
      name: username
      in: path
      description: Username of the user to perform the action
      required: true
      schema:
        type: string
      example: username1

    MealId:
      name: id
      in: path
      description: Id of meal
      required: true
      schema:
        type: integer
        minimum: 0
      example: 1

    Filter:
      name: filter
      in: query
      description: Filtering for results
      schema:
        type: string
      example: (field1 ne 'value1') OR ((field2 gt 0) AND (field2 lt 2000))

    ItemsPerPage:
      name: itemsPerPage
      schema:
        type: integer
        minimum: 1
        default: 10
      in: query
      description: Items per page

    PageNumber:
      name: pageNumber
      schema:
        type: integer
        minimum: 1
        default: 1
      in: query
      description: Page number


  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserAllReq:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
            required:
              - username
              - name
              - email
              - role
              - daily_calories
              - password

    Meal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meal'

    MealReq:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meal'
            required:
              - name
              - date

    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username
              password:
                type: string
                format: password
                description: Password
            required:
              - username
              - password
            example:
              username: user1
              password: p4ssw0rd

  responses:
    BadRequest:
      description: The request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: Request body is not valid JSON
            status: 400
            title: Bad Request
            type: "about:blank"

    Unauthorized:
      description: The user is not authenticated to perform the action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: No authorization token provided
            status: 401
            title: Unauthorized
            type: "about:blank"

    Forbidden:
      description: The user does not have the right permissions to perform the action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: "User 'user1' belongs to the role 'USER' and is not allowed to perform the action"
            status: 403
            title: Forbidden
            type: "about:blank"

    NotFound:
      description: The specified request was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: "User 'user1' not found"
            status: 404
            title: Not Found
            type: "about:blank"

    Conflict:
      description: The specified object already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: "User 'user1' exists already"
            status: 404
            title: Not Found
            type: "about:blank"

    SuccessUsers:
      description: Successfully read users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedResponse'
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
          example:
            detail: List of users succesfully read
            status: 200
            title: Success
            numPages: 1
            totalResults: 4
            data:
              - username: admin
                daily_calories: 0
                email: admin@adminmail.com
                name: Administrator
                role: ADMIN,
              - username: manager1
                daily_calories: 2000
                email: manager1@managermail.com
                name: Manager 1
                role: MANAGER
              - username: user1
                daily_calories: 2500
                email: user1@usermail.com
                name: User 1
                role: USER
              - username: user2
                daily_calories: 3000
                email: user2@usemail.com
                name: User 2
                role: USER

    SuccessUser:
      description: Action performed on user successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              $ref: '#/components/schemas/User'
          example:
            detail: "The action has been successuflly applied to user 'JohnDoe'"
            status: 200
            title: Success
            data:
              username: JohnDoe
              daily_calories: 2500
              email: john.doe@users.com
              name: John Doe
              role: USER

    SuccessString:
      description: The action has been succesfully performed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              type: string
          example:
            detail: Action performed successfully
            status: 200
            title: Success
            data: null

    SuccessMeals:
      description: Successfully read meals for user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginatedResponse'
            data:
              type: array
              items:
              $ref: '#/components/schemas/Meal'
          example:
            detail: "List of meals succesfully read for user: 'user1'"
            num_pages: 1
            status: 200
            title: Success
            total_result: 2
            data:
              - id: 1
                calories: 500
                date: 2020-02-11
                description: Meal 1 User 1
                grams: 100
                name: meal 1
                time: 15:00:03
                under_daily_total: true
              - id: 2
                calories: 2100
                date: 2020-02-11
                description: Meal 2 User 1
                grams: 100
                name: meal 2
                time: "15:10:03"
                under_daily_total: true

    SuccessMeal:
      description: Successfully updated meal
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
            data:
              $ref: '#/components/schemas/Meal'
          example:
            detail: "The action has been successuflly applied to meal with id '1'"
            status: 200
            title: Success
            data:
              id: 1
              calories: 500
              date: 2020-02-11
              description: Meal 1 User 1
              grams: 100
              name: meal 1
              time: "15:00:03"
              under_daily_total: true

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: calories.main.controller.auth.decode_token